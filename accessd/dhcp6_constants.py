#!/usr/bin/env python3
#
# IANA XML to C header
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org/>
import sys
import os
from lxml import etree

os.chdir(os.path.dirname(os.path.abspath(__file__)))

with open("dhcpv6-parameters.xml", "r") as fd:
    xml = etree.parse(fd)

xpopts = {
    'namespaces': {
        "reg": "http://www.iana.org/assignments"
    }
}

def tag_text(node, *names):
    rv = []
    for name in names:
        nodes = node.xpath('reg:%s' % name, **xpopts)
        rv.append(nodes[0].text if len(nodes) > 0 else None)
    return tuple(rv)

def print_registry(registry, prefix, stripprefixes = [], extra = None):
    print('''
/* %s */
#ifndef %s
#define %s(name, val, ...)
#endif''' % (tag_text(registry, 'title') + (prefix, prefix)))

    for record in registry.xpath("reg:record", **xpopts):
        value, description_orig = tag_text(record, 'value', 'description')
        try:
            value = int(value)
        except:
            continue
        description = description_orig.replace('-', '_').replace(' ', '_').upper()
        for p in stripprefixes:
            if description.startswith(p):
                description = description[len(p):]
        if description in ['UNASSIGNED', 'RESERVED']:
            print('/* %d: %s */' % (value, description_orig))
            continue

        extadd = ''
        if extra is not None:
            extadd = extra(record)

        part1 = '%s(%s,' % (prefix, description)
        print('%s%s%4d%s)' % (part1, '\t' * ((47 - len(part1)) // 8), value, extadd))

    print('#undef %s' % prefix)

print('''/*
 * DO NOT EDIT - this file is autogenerated from dhcpv6-parameters.xml
 *
 * download a fresh version instead and run dhcp6_constants.py
 */
/* clang-format off */
''')

msgtypes = xml.xpath("//reg:registry[@id='dhcpv6-parameters-1']", **xpopts)[0]
print_registry(msgtypes, 'DH6MSG')

def option_flags(record):
    oro, singleton = tag_text(record, 'oro', 'singleton')
    oro = oro not in [None, '', 'No']
    singleton = singleton not in [None, '', 'No']
    return ', %d, %d' % (oro, singleton)

msgtypes = xml.xpath("//reg:registry[@id='dhcpv6-parameters-2']", **xpopts)[0]
print_registry(msgtypes, 'DH6OPT', ['OPTION_'], option_flags)

msgtypes = xml.xpath("//reg:registry[@id='dhcpv6-parameters-5']", **xpopts)[0]
print_registry(msgtypes, 'DH6ST')

msgtypes = xml.xpath("//reg:registry[@id='dhcpv6-parameters-6']", **xpopts)[0]
print_registry(msgtypes, 'DUID', ['DUID_'])
#import code; code.interact(local = locals())
